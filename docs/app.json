[{"name": "app.py", "content": "from shiny import App, reactive, render, ui\nimport json\nimport base64\nimport requests\nimport os\n\n# Define the list names\nLIST_NAMES = {\n    \"list1\": \"Today\",\n    \"list2\": \"This Week\",\n    \"list3\": \"Meetings\",\n    \"list4\": \"Backlog\",\n    \"list5\": \"Parked\",\n    \"list6\": \"Goals\",\n    \"list7\": \"Personal\",\n    \"list8\": \"Miscellaneous\"\n}\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.input_select(\n            \"active_list\",\n            \"Working List (for adding/editing)\",\n            LIST_NAMES\n        ),\n        ui.hr(),\n        ui.input_text(\"task\", \"Enter Task\"),\n        ui.input_text(\"description\", \"Enter Description\"),\n        ui.input_action_button(\"add\", \"Add Task\", class_=\"btn-primary\"),\n        ui.hr(),\n        ui.h4(\"Manage Tasks\"),\n        ui.output_ui(\"task_selector\"),\n        ui.output_ui(\"edit_controls\"),  # Moved up\n        ui.hr(),  # Added hr here\n        ui.output_ui(\"move_controls\"),  # Moved down\n        ui.hr(),\n\n        # Add GitHub save controls\n        ui.h4(\"Save to GitHub\"),\n        ui.input_text(\n            \"github_repo\",\n            \"Repository (user/repo)\",\n            value=\"\",\n            autocomplete=\"username/rep\"  # Hint to browser this is a username field\n        ),\n        ui.input_password(  # Simple password input\n            \"github_token\",\n            \"Github Token\",\n            value=\"\"\n        ),\n        \n     #   ui.input_text(\"github_path\", \"File path (e.g., tasks.txt)\"),\n        ui.output_text(\"github_status_output\"),\n     #   ui.input_action_button(\"save_github\", \"Save to GitHub\", class_=\"btn-success\"),        \n        ui.input_action_button(\"load_github\", \"Load from GitHub\", class_=\"btn-info\"),\n       \n        width=350\n    ),\n\n    ui.card(\n        ui.row(\n            ui.column(12,\n                ui.input_selectize(\n                    \"display_lists\",\n                    \"Select Lists to Display\",\n                    LIST_NAMES,\n                    multiple=True,\n                    selected=[\"list1\"]\n                )\n            )\n        ),\n        ui.output_ui(\"unsaved_changes_alert\"),  # Add this line\n        ui.output_ui(\"task_lists_display\")\n    )\n)\n\ndef server(input, output, session):\n    # Create a dictionary to store tasks and descriptions for each list\n    lists_data = reactive.value({\n        list_id: {\"tasks\": [], \"descriptions\": []}\n        for list_id in LIST_NAMES.keys()\n    })\n    \n    changes_unsaved = reactive.value(False)\n    editing = reactive.value(False)\n    \n\n           \n\n    def get_current_list():\n        return lists_data.get()[input.active_list()]\n\n    @reactive.effect\n    @reactive.event(input.add)\n    def add_task():\n        if input.task().strip():\n            current_data = lists_data.get().copy()\n            current_list = current_data[input.active_list()]\n            \n            current_list[\"tasks\"].append(input.task())\n            current_list[\"descriptions\"].append(input.description())\n            \n            lists_data.set(current_data)\n            changes_unsaved.set(True)  # Add this line\n            ui.update_text(\"task\", value=\"\")\n            ui.update_text(\"description\", value=\"\")\n\n    @output\n    @render.ui\n    def task_selector():\n        current_list = get_current_list()\n        if not current_list[\"tasks\"]:\n            return ui.p(\"No tasks in this list\")\n        \n        options = {str(i): f\"{i}. {task}\" \n                  for i, task in enumerate(current_list[\"tasks\"], 1)}\n        \n        return ui.div(\n            ui.input_checkbox_group(\n                \"selected_tasks\",\n                \"Select Tasks to Move/Edit\",\n                options\n            )\n        )\n\n    @output\n    @render.ui\n    def task_lists_display():\n        selected_lists = input.display_lists()\n        if not selected_lists:\n            return ui.p(\"Please select lists to display\")\n        \n        col_width = 12 // len(selected_lists)\n        col_width = max(3, min(12, col_width))\n        \n        columns = []\n        for list_id in selected_lists:\n            current_list = lists_data.get()[list_id]\n            current_tasks = current_list[\"tasks\"]\n            current_descriptions = current_list[\"descriptions\"]\n            \n            task_items = []\n            task_items.append(ui.h3(LIST_NAMES[list_id]))\n            \n            if not current_tasks:\n                task_items.append(ui.p(\"No tasks in this list\"))\n            else:\n                for i, (task, desc) in enumerate(zip(current_tasks, current_descriptions), 1):\n                    task_html = ui.div(\n                        ui.h5(f\"\u2022 {task}\"),\n                        ui.p(desc,style=\"text-indent:50px\"),\n                        style=\"margin-bottom: 0;\"\n                    )\n                    task_items.append(task_html)\n                \n            column = ui.column(\n                col_width,\n                ui.card(\n                    *task_items,\n                    style=\"height: 100%;\"\n                )\n            )\n            columns.append(column)\n        \n        return ui.row(*columns)\n\n    @output\n    @render.ui\n    def move_controls():\n        if not input.selected_tasks():\n            return ui.div()\n            \n        current_list_id = input.active_list()\n        move_options = {k: v for k, v in LIST_NAMES.items() if k != current_list_id}\n        \n        return ui.div(\n            ui.hr(),\n            ui.h4(\"Move Tasks\"),\n            ui.input_select(\n                \"move_to_list\",\n                \"Select Destination List\",\n                move_options\n            ),\n            ui.input_action_button(\"move_tasks\", \"Move Selected Tasks\", class_=\"btn-info\"),\n        )\n\n    @output\n    @render.ui\n    def edit_controls():\n        if not input.selected_tasks() or len(input.selected_tasks()) != 1:\n            return ui.div()\n        \n        if editing.get():\n            task_idx = int(input.selected_tasks()[0]) - 1\n            current_list = get_current_list()\n            \n            return ui.div(\n                ui.hr(),\n                ui.h4(\"Edit Task\"),\n                ui.input_text(\n                    \"edit_task\",\n                    \"Task\",\n                    value=current_list[\"tasks\"][task_idx]\n                ),\n                ui.input_text(\n                    \"edit_description\",\n                    \"Description\",\n                    value=current_list[\"descriptions\"][task_idx]\n                ),\n                ui.input_action_button(\"save_edit\", \"Save\", class_=\"btn-success\"),\n                ui.input_action_button(\"cancel_edit\", \"Cancel\", class_=\"btn-secondary\"),\n            )\n        else:\n            return ui.div(\n                        ui.hr(),\n                        ui.input_action_button(\"start_edit\", \"Edit Selected Task\", class_=\"btn-warning\"),\n                        ui.br(),\n                        ui.br(),\n                        ui.div(\n                            ui.input_action_button(\"move_up\", \"\u2191 Move Up\", class_=\"btn-primary\"),\n                            ui.input_action_button(\"move_down\", \"\u2193 Move Down\", class_=\"btn-primary\"),\n                            style=\"display: flex; gap: 10px;\"\n                        )\n                    )\n\n    @reactive.effect\n    @reactive.event(input.move_tasks)\n    def move_selected_tasks():\n        if not input.selected_tasks():\n            return\n            \n        selected_indices = [int(idx) - 1 for idx in input.selected_tasks()]\n        source_list_id = input.active_list()\n        target_list_id = input.move_to_list()\n        \n        current_data = lists_data.get().copy()\n        source_list = current_data[source_list_id]\n        target_list = current_data[target_list_id]\n        \n        # Get tasks and descriptions to move\n        tasks_to_move = [source_list[\"tasks\"][i] for i in selected_indices]\n        descriptions_to_move = [source_list[\"descriptions\"][i] for i in selected_indices]\n        \n        # Add to target list\n        target_list[\"tasks\"].extend(tasks_to_move)\n        target_list[\"descriptions\"].extend(descriptions_to_move)\n        \n        # Remove from source list (in reverse order to maintain indices)\n        for i in sorted(selected_indices, reverse=True):\n            source_list[\"tasks\"].pop(i)\n            source_list[\"descriptions\"].pop(i)\n        \n        lists_data.set(current_data)\n        changes_unsaved.set(True)  # Add this line\n\n    @reactive.effect\n    @reactive.event(input.start_edit)\n    def start_editing():\n        editing.set(True)\n\n    @reactive.effect\n    @reactive.event(input.cancel_edit)\n    def cancel_editing():\n        editing.set(False)\n\n    @reactive.effect\n    @reactive.event(input.save_edit)\n    def save_edit():\n        if not input.selected_tasks():\n            return\n            \n        task_idx = int(input.selected_tasks()[0]) - 1\n        current_data = lists_data.get().copy()\n        current_list = current_data[input.active_list()]\n        \n        current_list[\"tasks\"][task_idx] = input.edit_task()\n        current_list[\"descriptions\"][task_idx] = input.edit_description()\n        \n        lists_data.set(current_data)\n        changes_unsaved.set(True)  # Add this line\n        editing.set(False)\n\n    # Add a reactive value for GitHub save status\n    github_status = reactive.value(\"\")\n\n    @output\n    @render.text\n    def github_status_output():\n        return github_status.get()\n\n    @reactive.effect\n    @reactive.event(input.move_up)\n    def move_task_up():\n        if not input.selected_tasks() or len(input.selected_tasks()) != 1:\n            return\n            \n        task_idx = int(input.selected_tasks()[0]) - 1\n        if task_idx <= 0:  # Can't move up if already at top\n            return\n            \n        current_data = lists_data.get().copy()\n        current_list = current_data[input.active_list()]\n        \n        # Swap tasks\n        current_list[\"tasks\"][task_idx], current_list[\"tasks\"][task_idx-1] = \\\n            current_list[\"tasks\"][task_idx-1], current_list[\"tasks\"][task_idx]\n        \n        # Swap descriptions\n        current_list[\"descriptions\"][task_idx], current_list[\"descriptions\"][task_idx-1] = \\\n            current_list[\"descriptions\"][task_idx-1], current_list[\"descriptions\"][task_idx]\n        \n        lists_data.set(current_data)\n        changes_unsaved.set(True)  # Add this line\n        \n        # Update the selection to follow the moved task\n        ui.update_checkbox_group(\n            \"selected_tasks\",\n            selected=[str(task_idx)]  # Index is 0-based, but UI is 1-based\n        )\n\n    @reactive.effect\n    @reactive.event(input.move_down)\n    def move_task_down():\n        if not input.selected_tasks() or len(input.selected_tasks()) != 1:\n            return\n            \n        task_idx = int(input.selected_tasks()[0]) - 1\n        current_data = lists_data.get().copy()\n        current_list = current_data[input.active_list()]\n        \n        if task_idx >= len(current_list[\"tasks\"]) - 1:  # Can't move down if already at bottom\n            return\n            \n        # Swap tasks\n        current_list[\"tasks\"][task_idx], current_list[\"tasks\"][task_idx+1] = \\\n            current_list[\"tasks\"][task_idx+1], current_list[\"tasks\"][task_idx]\n        \n        # Swap descriptions\n        current_list[\"descriptions\"][task_idx], current_list[\"descriptions\"][task_idx+1] = \\\n            current_list[\"descriptions\"][task_idx+1], current_list[\"descriptions\"][task_idx]\n        \n        lists_data.set(current_data)\n        changes_unsaved.set(True)  # Add this line\n        \n        # Update the selection to follow the moved task\n        ui.update_checkbox_group(\n            \"selected_tasks\",\n            selected=[str(task_idx + 2)]  # Index is 0-based, but UI is 1-based\n        )    \n    \n    \n    \n    \n    \n    @output\n    @render.ui\n    def unsaved_changes_alert():\n        if changes_unsaved.get():\n            \n            return ui.div(\n                ui.card(\n                    ui.tags.b(\"\u26a0\ufe0funsaved changes\"),\n                    ui.input_action_button(\n                        \"quick_save\", \n                        \"Save Changes to GitHub\", \n                        class_=\"btn-success\"\n                    )\n                   # style=\"background-color: #fff3cd; color: #856404; border-color: #ffeeba; margin-bottom: 0;\"\n                )\n            )\n        return ui.div()\n    \n\n\n\n    @reactive.effect\n    @reactive.event(input.quick_save)\n    def handle_quick_save():\n        if not input.github_token() or not input.github_repo():\n            github_status.set(\"Please fill in GitHub credentials in the sidebar first\")\n            return\n\n        path = \"ToDoList.txt\"\n        try:\n            # Prepare the data\n            data = lists_data.get()\n            formatted_data = \"\"\n            for list_id, list_name in LIST_NAMES.items():\n                formatted_data += f\"=== {list_name} ===\\n\"\n                list_content = data[list_id]\n                for task, desc in zip(list_content[\"tasks\"], list_content[\"descriptions\"]):\n                    formatted_data += f\"- {task}\\n\"\n                    if desc.strip():\n                        formatted_data += f\"  Description: {desc}\\n\"\n                formatted_data += \"\\n\"\n\n            # GitHub API endpoint\n            repo = input.github_repo()\n            url = f\"https://api.github.com/repos/{repo}/contents/{path}\"\n\n            # Headers for authentication\n            headers = {\n                \"Authorization\": f\"token {input.github_token()}\",\n                \"Accept\": \"application/vnd.github.v3+json\"\n            }\n\n            # Check if file exists\n            try:\n                response = requests.get(url, headers=headers)\n                if response.status_code == 200:\n                    # File exists, get the SHA\n                    sha = response.json()[\"sha\"]\n                else:\n                    sha = None\n            except:\n                sha = None\n\n            # Prepare the content\n            content = base64.b64encode(formatted_data.encode()).decode()\n\n            # Prepare the data for the API request\n            data = {\n                \"message\": \"Update task lists\",\n                \"content\": content,\n            }\n            if sha:\n                data[\"sha\"] = sha\n\n            # Make the API request\n            response = requests.put(url, headers=headers, json=data)\n\n            if response.status_code in [200, 201]:\n                github_status.set(\"Successfully saved to GitHub!\")\n                changes_unsaved.set(False)\n            else:\n                github_status.set(f\"Error saving to GitHub: {response.status_code}\")\n\n        except Exception as e:\n            github_status.set(f\"Error: {str(e)}\")\n    \n    \n    \n    \n    \n    \n    \n    @reactive.effect\n    @reactive.event(input.save_github)\n    def save_to_github():\n        path= \"ToDoList.txt\"\n        if not input.github_token() or not input.github_repo():\n            github_status.set(\"Please fill in all GitHub fields\")\n            return\n\n        try:\n            # Prepare the data\n            data = lists_data.get()\n            formatted_data = \"\"\n            for list_id, list_name in LIST_NAMES.items():\n                formatted_data += f\"=== {list_name} ===\\n\"\n                list_content = data[list_id]\n                for task, desc in zip(list_content[\"tasks\"], list_content[\"descriptions\"]):\n                    formatted_data += f\"- {task}\\n\"\n                    if desc.strip():\n                        formatted_data += f\"  Description: {desc}\\n\"\n                formatted_data += \"\\n\"\n\n            # GitHub API endpoint\n            repo = input.github_repo()\n            \n            url = f\"https://api.github.com/repos/{repo}/contents/{path}\"\n\n            # Headers for authentication\n            headers = {\n                \"Authorization\": f\"token {input.github_token()}\",\n                \"Accept\": \"application/vnd.github.v3+json\"\n            }\n\n            # Check if file exists\n            try:\n                response = requests.get(url, headers=headers)\n                if response.status_code == 200:\n                    # File exists, get the SHA\n                    sha = response.json()[\"sha\"]\n                else:\n                    sha = None\n            except:\n                sha = None\n\n            # Prepare the content\n            content = base64.b64encode(formatted_data.encode()).decode()\n\n            # Prepare the data for the API request\n            data = {\n                \"message\": \"Update task lists\",\n                \"content\": content,\n            }\n            if sha:\n                data[\"sha\"] = sha\n\n            # Make the API request\n            response = requests.put(url, headers=headers, json=data)\n\n            if response.status_code in [200, 201]:\n                github_status.set(\"Successfully saved to GitHub!\")\n            else:\n                github_status.set(f\"Error saving to GitHub: {response.status_code}\")\n\n        except Exception as e:\n            github_status.set(f\"Error: {str(e)}\")\n\n\n\n    @reactive.effect\n    @reactive.event(input.load_github)      \n    def load_from_github():\n        path = \"ToDoList.txt\"\n        if not input.github_token() or not input.github_repo():\n            github_status.set(\"Please fill in all GitHub fields\")\n            return\n\n        try:\n            # GitHub API endpoint\n            repo = input.github_repo()\n            url = f\"https://api.github.com/repos/{repo}/contents/{path}\"\n\n            # Headers for authentication\n            headers = {\n                \"Authorization\": f\"token {input.github_token()}\",\n                \"Accept\": \"application/vnd.github.v3+json\"\n            }\n\n            # Get the file content\n            response = requests.get(url, headers=headers)\n            \n            if response.status_code == 200:\n                # Decode content from base64\n                content = base64.b64decode(response.json()[\"content\"]).decode()\n                \n                # Parse the content\n                current_list_id = None\n                new_data = {list_id: {\"tasks\": [], \"descriptions\": []} \n                        for list_id in LIST_NAMES.keys()}\n                \n                lines = [line.rstrip() for line in content.split('\\n')]\n                i = 0\n                while i < len(lines):\n                    line = lines[i]\n                    if not line:\n                        i += 1\n                        continue\n                        \n                    # Check if this is a list header\n                    if line.startswith('===') and line.endswith('==='):\n                        list_name = line.strip('= ')\n                        # Find the list_id for this list_name\n                        current_list_id = next(\n                            (k for k, v in LIST_NAMES.items() if v == list_name),\n                            None\n                        )\n                    # Check if this is a task\n                    elif line.startswith('- ') and current_list_id:\n                        task = line[2:]  # Remove the '- ' prefix\n                        new_data[current_list_id][\"tasks\"].append(task)\n                        \n                        # Look ahead for description\n                        desc = \"\"\n                        if i + 1 < len(lines):\n                            next_line = lines[i + 1]\n                            if next_line.startswith('  Description:'):\n                                desc = next_line[14:].strip()  # Remove '  Description: ' prefix\n                                i += 1  # Skip the description line\n                        new_data[current_list_id][\"descriptions\"].append(desc)\n                    \n                    i += 1\n\n                # Update the lists_data\n                lists_data.set(new_data)\n                github_status.set(\"Successfully loaded from GitHub!\")\n            else:\n                github_status.set(f\"Error loading from GitHub: {response.status_code}\")\n\n        except Exception as e:\n            github_status.set(f\"Error loading: {str(e)}\")\n \n\n\napp = App(app_ui, server)\n", "type": "text"}, {"name": "README.md", "content": "# ToDo\n\n# shiny4Python\nCreate a shiny for Python app.  You can create both a `site` or full app based on `FastAPI`.\n\nIn these lines we:\n- Install `shiny` & `shinylive`\n- Create a Hello world app\n- Run the [app](https://shiny.rstudio.com/py/docs/deploy.html) based on the `FastAPI`\n- Create as a [static website](https://shiny.rstudio.com/py/docs/shinylive.html) with `WebAssembly`\n\n```\npip install shiny\npip install shinylive\nshiny create .\nshiny run \nshinylive export . docs\n```\n\n`Note:` We output the website to `docs` to host on a Github Page\n\n\n![image](https://user-images.githubusercontent.com/33904170/215349262-68b36efa-ceff-40ea-ae80-052303a7258b.png)\n", "type": "text"}]